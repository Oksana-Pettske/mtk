programm = ws declaration*:d statement:b { Programm(:d, :b) };

declaration = "var" ws variable:v ":" ws type:t ";" ws { Declaration(:v, :t) };

variable = letter+ $s ws { $s };

type = int | array;
    int = "int" ws { IntType() };
    array = "[" ws type:t "]" ws { ArrType(:t) };

statement = loop | or | print | sequence | assignment | test | ifelse | while;
    loop = "(" ws statement:b ")*" ws { Loop(:b) };
    or = "{" ws statement:s1 "U" ws statement:s2 u*:ss "}" ws { createOr(:s1, :s2, :ss) };
    u = "U" ws statement;
    print = "print" ws "(" ws expression:e ")" ws { Print(:e) };
    sequence = "{" ws statement:s1 ";" ws statement:s2 seqs*:ss "}" ws { createSeq(:s1, :s2, :ss) };
    seqs = ";" ws statement;
    assignment = variable:v ":=" ws expression:e { Assignment(:v, :e) };
    test = "(" ws expression:l condition$s ws expression:r ")" ws "?" ws { Test($s, :l, :r) };
    ifelse = "if"    ws "(" ws expression:l condition$s ws expression:r ")" ws statement:p "else" ws statement:n { createIfElse($s, :l, :r, :p, :n) };
    while = "while" ws "(" ws expression:l condition$s ws expression:r ")" ws statement:st { createWhile($s, :l, :r, :st) };

expression = var | intconst | apply | unoperation | binoperation | update;
    var = variable:v { Var(:v) };
    intconst = digit+ $s ws { IntConst(s2i($s)) };
    apply = "app" ws "(" ws expression:a "," ws expression:i ")" ws { Apply(:a, :i) };
    unoperation = "-" $s ws expression:e { UnOperation($s, :e) };
    binoperation = "(" ws expression:l  sign$s ws expression:r ")" ws {BinOperation($s, :l, :r) };
    update = "upd" ws "(" ws expression:a "," ws expression:i "," ws expression:v ")" ws { Update(:a, :i, :v) };

letter = 'a'-'z';
digit  = '0'-'9';
condition   = "!=" | "==" | "<=" | ">=" | "<" | ">" ;
sign = "+" | "*" | "/" | "-" ;

ws = (' ' | '\t' | '\n' | '\r')*;