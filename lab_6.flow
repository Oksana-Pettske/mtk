import string;
import lingo/pegcode/driver;

Expr ::= IntConst, Mul, Add;
IntConst: (value: int);
Mul: (left: Expr, right: Expr);
Add: (left: Expr, right: Expr);

ExprRPN ::= IntConstRPN, MulRPN, AddRPN;
IntConstRPN: (value: int);
MulRPN: ();
AddRPN: ();

expr2str(expr: Expr) -> string {
    switch (expr : Expr) {         
        IntConst(c): i2s(c);
        Mul(l, r): "(" + expr2str(l) + "*" + expr2str(r) + ")";
        Add(l, r): "(" + expr2str(l) + "+" + expr2str(r) + ")";
    }
}

str2expr(str: string) -> Expr {
    lng = "#include D:\flow9\sandbox\mtk\lab_5.lingo";
    parsic(compilePegGrammar(lng), str, defaultPegActions);
}

Calc(expr: Expr) -> int {
    switch (expr : Expr) {         
        IntConst(c): c;
        Mul(l, r): Calc(l) * Calc(r);
        Add(l, r): Calc(l) + Calc(r);
    }
}

CalcRPN(exprRPN: [ExprRPN]) -> int {
    result = fold(exprRPN, ref [], \stack, e -> {
        switch(e) {
            IntConstRPN(c): refArrayPush(stack, c);
            MulRPN(): refArrayPush(stack, pop(stack) * pop(stack));
            AddRPN(): refArrayPush(stack, pop(stack) + pop(stack));
        };
        stack;
    });
    pop(result);
}

expr2rpn(expr: Expr) -> [ExprRPN] {
    switch (expr) {        
        IntConst(c): [IntConstRPN(c)];
        Mul(l, r): concat( concat( expr2rpn(l), expr2rpn(r) ), [MulRPN()] );
        Add(l, r): concat( concat( expr2rpn(l), expr2rpn(r) ), [AddRPN()] );
    }
}

rpn2str(exprRPN: [ExprRPN]) -> string {
    fold(exprRPN, "", \acc, e -> {
        switch (e) {
            IntConstRPN(c): acc + i2s(c) + " ";
            MulRPN(): acc + "* ";
            AddRPN(): acc + "+ ";
        }
    });
}

rpn2expr(exprRPN: [ExprRPN]) -> Expr {
    result = fold(exprRPN, ref [], \stack, e -> {
        switch(e) {
            IntConstRPN(c): refArrayPush(stack, IntConst(c));
            MulRPN(): refArrayPush(stack, Mul(pop(stack), pop(stack)));
            AddRPN(): refArrayPush(stack, Add(pop(stack), pop(stack)));
        };
        stack;
    });
    pop(result);
}

pop(stack: ref [?]) -> ? {
    topPos = length(^stack) - 1;
    element = ^stack[topPos];
    stack := subrange(^stack, 0, topPos);
    element;
}

main() {
    expr = Mul(Add(IntConst(4), Mul(IntConst(2), IntConst(3))), IntConst(5)); // (4 + 2 * 3) * 5 = 50
    //println(expr);
    expr_str = expr2str(expr);
    println(expr_str);
    result = Calc(expr);
    println(result);
    println("");

    rpn = expr2rpn(expr);
    //println(rpn);
    rpn_str = rpn2str(rpn);
    println(rpn_str);
    resultRPN = CalcRPN(rpn);
    println(resultRPN);
    println("");

    rpn_expr = rpn2expr(rpn);
    //println(rpn_expr);
    rpn_expr_str = expr2str(rpn_expr);
    println(rpn_expr_str);

    quit(0);
}